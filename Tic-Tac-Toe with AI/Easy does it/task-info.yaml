type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }
            return fields;
        }
    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            if (!reply.contains("Making move level \"easy\"")) {
                return new CheckResult(false,
                    "No \"Making move level \"easy\"\" line in output");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/TextUI.java
  visible: true
  text: |
    package tictactoe;


    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    public class TextUI {
        private Scanner scn;
        private GameLogic game;

        public TextUI(Scanner scn) {
            this.scn = scn;
            game = new GameLogic();
        }

        public void start() {
            game.setGridState(getInput());
            System.out.println(game);
            enterCoordinates();
            System.out.println(game);
            printWinner();
        }

        private String getInput() {
            while (true) {
                System.out.println("Enter cells:");
                String input = scn.nextLine();
                if (input.matches("[xoXO_]{9}")) {
                    return input;
                }
                System.out.println("Wrong input. Try again.");
            }
        }

        private void enterCoordinates() {
            String rgx = "(\\d+) (\\d+)";
            int x = -1;
            int y = -1;

            while (true) {
                System.out.println("Enter the coordinates:");
                Matcher m = Pattern.compile(rgx).matcher(scn.nextLine());

                if (m.matches()) {
                    x = Integer.parseInt(m.group(1)) - 1;
                    y = Integer.parseInt(m.group(2)) - 1;
                    if (x > 2 || y > 2) {
                        System.out.println("Coordinates should be from 1 to 3!");
                    } else if (game.play(x, y)) {
                        break;
                    } else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                } else {
                    System.out.println("You should enter numbers!");
                }
            }
        }

        private void printWinner() {
            if (game.checkWinner()) {
                System.out.println(game.getTurn() + " wins");
            } else if (game.getTurnCount() == 9) {
                System.out.println("Draw");
            } else {
                System.out.println("Game not finished");
            }
        }

    }
  learner_created: true
- name: src/tictactoe/GameLogic.java
  visible: true
  text: |
    package tictactoe;


    public class GameLogic {
        private char[][] grid;
        private char turn = 'X';
        private char winner = '\0';
        private int turnCount;

        public GameLogic() {
            grid = new char[][] {
                    {' ', ' ', ' '},
                    {' ', ' ', ' '},
                    {' ', ' ', ' '},
            };
            turnCount = 0;
        }

        public void setGridState(String state) {
            state = state.toUpperCase().replace('_', ' ');
            for (int i = 0; i < 3; ++i) {
                for (int j = 0; j < 3; ++j) {
                    grid[i][j] = state.charAt(i * 3 + j);
                }
            }
            checkTurn();
        }

        private void checkTurn() {
            int countX = 0;
            int countO = 0;
            for (char[] ch : grid) {
                for (char c : ch) {
                    countX += c == 'X' ? 1 : 0;
                    countO += c == 'O' ? 1 : 0;
                }
            }
            turnCount += countX + countO;
            turn = countX == countO ? 'X' : 'O';
        }

        private void swapTurn() {
            turn = turn == 'X' ? 'O' : 'X';
        }

        public boolean play(int x, int y) {
            y = Math.abs(2 - y);
            if (grid[y][x] != ' ') {
                return false;
            }
            grid[y][x] = turn;
            ++turnCount;
            return true;
        }

        public char getTurn() {
            return turn;
        }

        public int getTurnCount() {
            return turnCount;
        }

        public boolean checkWinner() {
            int count = 0;

            for (int y = 0; y < 3; ++y) {
                for (int x = 0; x < 3; ++x) {
                    if (grid[y][x] == turn) {
                        ++count;
                    }
                }
                if (count == 3) {
                    winner = turn;
                    break;
                }
                count = 0;
            }

            count = 0;
            for (int x = 0; x < 3; ++x) {
                for (int y = 0; y < 3; ++y) {
                    if (grid[y][x] == turn) {
                        ++count;
                    }
                }
                if (count == 3) {
                    winner = turn;
                    break;
                }
                count = 0;
            }

            count = 0;
            int count2 = 0;
            for (int i = 0; i < 3; ++i) {
                int y = Math.abs(2 - i);
                if (grid[y][i] == turn) {
                    ++count;
                }
                if (grid[i][i] == turn) {
                    ++count2;
                }
            }
            if (count == 3 || count2 == 3) {
                winner = turn;
            }

            boolean hasWon = winner != '\0';
            if (!hasWon) {
                swapTurn();
            }
            return hasWon;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("---------\n| ");
            for (int i = 0; i < 3; ++i) {
                for (int j = 0; j < 3; ++j) {
                    sb.append(grid[i][j]).append(" ");
                }
                if (i == 2) {
                    sb.append("|\n---------");
                } else {
                    sb.append("|\n| ");
                }
            }
            return sb.toString();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/448/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 06 Dec 2020 05:00:24 UTC
record: 2
